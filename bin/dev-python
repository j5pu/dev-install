#!/usr/bin/env bash

#
# install python to $DEV_PREFIX
# https://noknow.info/it/os/install_gdbm_from_source?lang=en
# https://noknow.info/it/os/install_xz_utils_from_source?lang=en
# https://www.openssl.org
# https://noknow.info/it/os/install_readline_from_source?lang=en
# https://noknow.info/it/os/install_ncurses_from_source?lang=en
# https://noknow.info/it/os/install_pkg_config_from_source?lang=en
# https://noknow.info/it/os/install_libuuid_from_source?lang=en
# https://tkdocs.com/tutorial/install.html
# https://github.com/linux-test-project/lcov
set -eu
set -o errtrace
shopt -u inherit_errexit
#trap "exit 1" SIGUSR1
#PID=$$

#######################################
# installs dependencies for macOS and Debian
# Globals:
#   DARWIN
# Arguments:
#  None
#######################################
_deps() {
  local i
  if [ "${DARWIN-}" ]; then
    for i in openssl@1.1 xz gdbm; do
      brew list --formula --quiet "${i}" >/dev/null || HOMEBREW_NO_INSTALL_CLEANUP=1 brew install --formula --quiet "${i}"
    done
  elif [ "${DEBIAN-}" ]; then
    sudo apt-get update -qq 1>/dev/null
    sudo apt-get install -qq build-essential gdb lcov pkg-config \
      libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \
      libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \
      lzma lzma-dev tk-dev uuid-dev zlib1g-dev 1>/dev/null
  else
    _die "Unsupported OS"
  fi
}

#######################################
# die helper
# Arguments:
#  None
#######################################
_die() {
  local rc=$? c p s
  [ $rc -eq 0 ] || { c="red"; p="${0##*/}: "; s="✘";}
  >&2 printf -- "%s\n" "$(git config --get-color "" "${c:-green} bold")${s:-✔}$(git config --get-color "" reset) ${p}$*"
  exit $rc
}

#######################################
# wrapper for development python executable
# Globals:
#   DEV_BIN
# Arguments:
#  None
#######################################
_python() { "${DEV_BIN}/python3" "$@"; }

#######################################
# test pyton installation
# Globals:
#   PYTHON_PREFIX
# Arguments:
#  None
#######################################
_tests() {
  local i tmp
  tmp="$(mktemp)"
  cat > "${tmp}" <<EOF
import dbm

with dbm.ndbm.open("test", "c") as db:
    db[b"foo \\xbd"] = b"bar \\xbd"
with dbm.ndbm.open("test", "r") as db:
    assert list(db.keys()) == [b"foo \\xbd"]
    assert b"foo \\xbd" in db
    assert db[b"foo \\xbd"] == b"bar \\xbd"
EOF
  python "${tmp}"

  tmp="$(mktemp -d)"
  python -m venv "${tmp}"

  for i in _bz2 _ctypes _dbm _decimal _gdbm _io _sqlite3 _lzma _ssl _tkinter _uuid pyexpat readline zlib; do
    python -c "import ${i}"
  done

  python -c "import sqlite3; sqlite3.connect(':memory:').enable_load_extension(True)"

  "${DEV_BIN}/pip3" install --quiet --upgrade pip setuptools wheel
}

#######################################
# display script' commands
# Arguments:
#   0
#######################################
commands() { awk -F '(' '/^[a-z].*\(\)/ && ! /^main/ { print $1 }' "$0"; }

#######################################
# show usage
# Globals:
#   USER
# Arguments:
#   0
#######################################
help() {
  local rc=$?
  [ ! "${1-}" ] || { echo "${0##*/}: $1: invalid command"; echo; }
  >&2 cat <<EOF
usage: ${0##*/} [<command>]
   or: ${0##*/} -h|--help|help

installs python and dependencies to \$DEV_PREFIX
updates pip, setuptools and wheel when no command is given

Commands:
   commands     display ${0##*/}' commands
   help         show help and exit
   installed    show installed python version
   latest       show the latest python version available
   update       pip, setuptools and wheel update
   upgrade      install the latest available version
EOF

  exit $rc
}

#######################################
# installed python version
# Arguments:
#  None
# Returns:
#  1 if python is not installed
#######################################
installed() {
  local installed
  if [ ! "${installed-}" ]; then
    installed="$(_python --version 2>/dev/null | awk '{ print $2 }')"
    [ "${installed-}" ] || _die "Python Not Installed"
  fi
  echo "${installed}"
}

#######################################
# latest python version available to install
# Globals:
#   PYTHON_VERSION
#   URL
# Arguments:
#  None
# Returns:
#  1 if no version available
#######################################
latest() {
  local minor latest
  if [ ! "${latest-}" ]; then
    minor="$(curl -fsSL "${URL}" \
    | awk -F '["/]' -v v="${PYTHON_VERSION}." '$2 ~ v { gsub(v, ""); print $2 }' | sort -V | tail -1)"
    [ "${minor-}" ] || _die "Latest Version Not Found"
    latest="${PYTHON_VERSION}.${minor}"
  fi
  echo "${latest}"
}

#######################################
# upgrades python is a new minor version is available
# Globals:
#   DARWIN
#   DEV_PREFIX
#   DEV_SRC
#   URL
# Arguments:
#  None
#######################################
upgrade() {
  local installed configure=() sqlite src
  [ "$(installed 2>/dev/null)" != "$(latest)" ] || { true; _die "Python up-to-date"; }

  _deps

  src="${DEV_SRC}/python" && tar-extract "${URL}/$(latest)/Python-$(latest).tar.xz" "${src}" >/dev/null && cd "${src}"
  [ -f "./configure" ] || _die "${src}: No such file or directory"

  if [ "${DARWIN-}" ]; then
  configure+=("--with-dtrace")

  sqlite="$(brew --prefix sqlite)"
  export PATH="${sqlite}/bin:${PATH}"
  # Alt 2:
  # LD_RUN_PATH="${sqlite}/lib" configure LDFLAGS="${ldflags-}"  CPPFLAGS="${cppflags-}" …
  # LD_RUN_PATH="${sqlite}/lib" make
  # -Wl,-rpath="${sqlite}/lib" -Wl,-rpath-link="${sqlite}/lib"
  # Alt 3:
  #
  #     LDFLAGS_NODIST="-L${sqlite}/lib -Wl,-rpath-link=${sqlite}/lib"
  # ld: warning: directory not found for option '-L/usr/lib/termcap'
configure+=(
    CPPFLAGS="-I${sqlite}/include"
    LDFLAGS="-L${sqlite}/lib"
)
else
  configure+=("--enable-shared")
fi

  configure+=(
    "--enable-ipv6"
    "--enable-loadable-sqlite-extensions"
    "--enable-option-checking=fatal"
    "--enable-shared"
    "--prefix=${DEV_PREFIX}"
    "--with-builtin-hashlib-hashes=md5,sha1,sha256,sha512,sha3,blake2"
    "--with-dbmliborder=gdbm:ndbm"
    "--with-ensurepip"
    "--with-lto"
    "--with-openssl=$(brew --prefix openssl@1.1)"
    "--with-system-expat"
    "--with-system-ffi"
)
  LD_RUN_PATH="${sqlite}/lib" ./configure "${configure[@]}"
  LD_RUN_PATH="${sqlite}/lib" make -j"$(make-jobs)" --quiet

  installed="$(installed)"
  _die "Python: Upgraded: ${installed}"
  _die "Python: Already Up To Date"
}

#######################################
# updates pip setuptools and wheel to the latest version
# Arguments:
#  None
#######################################
update() {
  test -x "${DEV_BIN}/python3" || upgrade

  _python -m pip install --quiet --upgrade pip setuptools wheel || _die "Pip Update Failed"
  _die "Pip: Updated"
}

#######################################
# description
# Globals:
#   URL
# Arguments:
#  None
#######################################
main() {
  . "$(dirname "$0")/dev-env.bash"

  URL="https://www.python.org/ftp/python"

  if [ "${1-}" ]; then
    case "${1-}" in
      commands|installed|latest|update|upgrade) "$1"; exit;;
      prefix) installed >/dev/null && echo "${DEV_PREFIX}"; exit ;;
      -h|--help|help) help ;;
      *) false || help "$1" ;;
    esac
  fi

  update
}

main "$@"
