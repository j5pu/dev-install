#!/bin/sh

set -eu

## Debian
# deb-src http://archive.ubuntu.com/ubuntu/ bionic main
# sudo apt-get update
# sudo apt-get build-dep python3
# sudo apt-get install pkg-config
# sudo apt-get install build-essential gdb lcov pkg-config \
#      libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \
#      libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \
#      lzma lzma-dev tk-dev uuid-dev zlib1g-dev
## macOS
# brew install openssl xz gdbm

trap 'rm -rf ${src}' 1 2 3 6

: "${PYTHON_PREFIX=/opt}"
: "${PYTHON_VERSION=3.10}"
export PATH="${PYTHON_PREFIX}/bin:${PATH}"

deps() {
  if $MACOS; then
    for i in openssl@1.1 xz gdbm; do
      brew install --quiet $i
    done
  elif grep -q debian /etc/os-release 2>/dev/null; then
    sudo apt-get update -qq
    sudo apt-get install -qq build-essential gdb lcov pkg-config \
      libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \
      libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \
      lzma lzma-dev tk-dev uuid-dev zlib1g-dev
  fi
}

force(){ [ "${PYTHON_PREFIX}" = "/" ] || rm -rf "${PYTHON_PREFIX:?}"/*; }

installed() { python --version 2>/dev/null | awk '{ print $2 }';}

jobs() { nproc 2>/dev/null || sysctl -n hw.physicalcpu; }

latest() {
  if [ ! "${latest-}" ]; then
    minor="$(curl -fsSL "${URL}" \
    | awk -F '["/]' -v v="${PYTHON_VERSION}." '$2 ~ v { gsub(v, ""); print $2 }' | sort -V | tail -1)"
    [ "${minor-}" ] || { echo Error Latest Version; exit 1; }
    latest="${PYTHON_VERSION}.${minor}"
  fi
  echo "${latest}"
}

prefix() {
  root="$(dirname "${PYTHON_PREFIX}")"
  [ "${root}" = "/" ] || {
    test -w "${root}" || {
      $(command -v sudo) chown -R "$(id -u):$(id -g)" "${root}"
      $(command -v sudo) chmod -R g+w "${root}"
    }
  }
  mkdir -p "${PYTHON_PREFIX}/lib"
}

# PYTHON
# https://devguide.python.org/setup/
py() {
  if [ "$(installed)" != "$(latest)" ]; then
    prefix
    if $MACOS; then
      opts="--with-dtrace"
      sqlite="$(brew --prefix sqlite)"

      export LDFLAGS="-L${sqlite}/lib" CPPFLAGS="-L${sqlite}/include"
    else
      opts=""
    fi

    src="${PYTHON_PREFIX}/src/python"
    mkdir -p "${src}"
    cd "${src}"
    curl -fsSL "${URL}/$(latest)/Python-$(latest).tar.xz" |
      tar --extract --directory "${src}" --strip-components=1 --file -
    [ -f "./configure" ] || { echo Error downloading Python; exit 1; }

#    sed "s|испытание.pythontest.net|docs.python.org|" Lib/test/test_socket.py >/tmp/a
#    mv /tmp/a Lib/test/test_socket.py
    sqlite="$(brew --prefix sqlite)"

    ./configure \
      --enable-ipv6 \
      --enable-loadable-sqlite-extensions \
      --enable-optimizations \
      --enable-option-checking=fatal \
      --prefix=${PYTHON_PREFIX} \
      --with-builtin-hashlib-hashes=md5,sha1,sha256,sha512,sha3,blake2 \
      --with-dbmliborder=gdbm:ndbm \
      --enable-shared \
      --with-ensurepip \
      --with-lto \
      --with-openssl="$(brew --prefix openssl@1.1)" \
      --with-system-expat \
      --with-system-ffi

    make -j"$(jobs)" --quiet
    make test --quiet
    make install
    python -m ensurepip --upgrade --default-pip >/dev/null
    tests
  fi
  python -m pip install --quiet --upgrade pip setuptools wheel
}

python() { "${PYTHON_PREFIX}/bin/python3" "$@"; }

sqlite(){
  src="${PYTHON_PREFIX}/src/sqlite"
  mkdir -p "${src}"
  cd "${src}"
  curl -fsSL "https://www.sqlite.org/src/tarball/sqlite.tar.gz" |
    tar --extract --directory "${src}" --strip-components=1 --file -
  [ -f "./configure" ] || { echo Error downloading sqlite; exit 1; }

  installed=""; ! test -x "${PYTHON_PREFIX}/bin/python3" || installed="$(sqlite3 --version | awk '{ print $1 }')"

  [ "${installed-}" != "$(cat VERSION)" ] || return 0

  export CPPFLAGS="\
    -DSQLITE_ENABLE_COLUMN_METADATA=1 \
    -DSQLITE_ENABLE_FTS3=1 \
    -DSQLITE_ENABLE_FTS3_PARENTHESIS=1 \
    -DSQLITE_ENABLE_FTS4=1 \
    -DSQLITE_ENABLE_FTS5=1 \
    -DSQLITE_ENABLE_JSON1=1 \
    -DSQLITE_ENABLE_LOAD_EXTENSION=1 \
    -DSQLITE_ENABLE_RTREE=1 \
    -DSQLITE_ENABLE_STAT4=1 \
    -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT=1 \
    -DSQLITE_MAX_VARIABLE_NUMBER=250000 \
    -DSQLITE_SOUNDEX=1 \
    -DSQLITE_TEMP_STORE=3 \
    -DSQLITE_USE_URI=1 \
    -O2 \
    -I. \
    -fPIC"
  export PREFIX="${PYTHON_PREFIX}"

  LIBS="-lm -ldl -lreadline -lncurses" ./configure \
    --disable-editline \
    --disable-tcl \
    --enable-readline \
    --enable-session \
    --enable-shared \
    --enable-tempstore=always \
    --prefix="${PREFIX}"
  make -j "${CMAKE_BUILD_PARALLEL_LEVEL}"
  make install

  test -x "${PYTHON_PREFIX}/bin/sqlite3" || { echo Error installing Python; exit 1; }

  tmp="$(mktemp)"
  cat > "${tmp}" <<EOS
  create table students (name text, age integer);
  insert into students (name, age) values ('Bob', 14);
  insert into students (name, age) values ('Sue', 12);
  insert into students (name, age) values ('Tim', 13);
  select name from students order by age asc;
EOS
  [ "$(sqlite3 < "${tmp}")" = "$(printf '%s\n' Sue Tim Bob)" ] || { echo "sqlite3 failed"; exit 1; }
}

tests() {
  tmp="$(mktemp)"
  cat > "${tmp}" <<EOF
import dbm

with dbm.ndbm.open("test", "c") as db:
    db[b"foo \\xbd"] = b"bar \\xbd"
with dbm.ndbm.open("test", "r") as db:
    assert list(db.keys()) == [b"foo \\xbd"]
    assert b"foo \\xbd" in db
    assert db[b"foo \\xbd"] == b"bar \\xbd"
EOF
  python "${tmp}"

  tmp="$(mktemp -d)"
  python -m venv "${tmp}"

  for i in _bz2 _ctypes _dbm _decimal _gdbm _sqlite3 _lzma _ssl _tkinter _uuid pyexpat readline zlib; do
    python -c "import ${i}"
  done

  python -c "import sqlite3; sqlite3.connect(':memory:').enable_load_extension(True)"

  "${PYTHON_PREFIX}/bin/pip3" install --quiet --upgrade pip setuptools wheel
}

main() {
  URL="https://www.python.org/ftp/python"
  MACOS=true; [ "$(uname -s)" = "Darwin" ] || MACOS=false

  case "${1-}" in
    jobs|latest|installed|tests) "$1"; exit;;
    prefix) echo "${PYTHON_PREFIX}"; exit ;;
    -f|--force) force; shift;;
    -h|--help) echo "Usage: ${0##*/} [jobs|latest|installed|prefix|tests] [-f|--force]"; exit;;
  esac

#  decimal
#  sqlite3
  py
}

main "$@"
