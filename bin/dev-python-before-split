#!/usr/bin/env bash

#
# Installs python in $DEV_PREFIX

set -eu

# PYTHON
# https://devguide.python.org/setup/
py() {
  if [ "$(installed)" != "$(latest)" ]; then
    prefix
    if $MACOS; then
      opts="--with-dtrace"
      sqlite="$(brew --prefix sqlite)"

      export LDFLAGS="-L${sqlite}/lib" CPPFLAGS="-L${sqlite}/include"
    else
      opts=""
    fi

    src="${PYTHON_PREFIX}/src/python"
    mkdir -p "${src}"
    cd "${src}"
    curl -fsSL "${URL}/$(latest)/Python-$(latest).tar.xz" |
      tar --extract --directory "${src}" --strip-components=1 --file -
    [ -f "./configure" ] || { echo Error downloading Python; exit 1; }

#    sed "s|испытание.pythontest.net|docs.python.org|" Lib/test/test_socket.py >/tmp/a
#    mv /tmp/a Lib/test/test_socket.py

    ./configure \
      --enable-ipv6 \
      --enable-loadable-sqlite-extensions \
      --enable-optimizations \
      --enable-option-checking=fatal \
      --prefix=${PYTHON_PREFIX} \
      --with-builtin-hashlib-hashes=md5,sha1,sha256,sha512,sha3,blake2 \
      --with-dbmliborder=gdbm:ndbm \
      --enable-shared \
      --with-ensurepip \
      --with-lto \
      --with-openssl="$(brew --prefix openssl@1.1)" \
      --with-system-expat \
      --with-system-ffi

    make test --quiet
    make install
    python -m ensurepip --upgrade --default-pip >/dev/null
    tests
  fi
  python -m pip install --quiet --upgrade pip setuptools wheel
}

sqlite(){
  src="${PYTHON_PREFIX}/src/sqlite"
  mkdir -p "${src}"
  cd "${src}"
  curl -fsSL "https://www.sqlite.org/src/tarball/sqlite.tar.gz" |
    tar --extract --directory "${src}" --strip-components=1 --file -
  [ -f "./configure" ] || { echo Error downloading sqlite; exit 1; }

  installed=""; ! test -x "${PYTHON_PREFIX}/bin/python3" || installed="$(sqlite3 --version | awk '{ print $1 }')"

  [ "${installed-}" != "$(cat VERSION)" ] || return 0

  export CPPFLAGS="\
    -DSQLITE_ENABLE_COLUMN_METADATA=1 \
    -DSQLITE_ENABLE_FTS3=1 \
    -DSQLITE_ENABLE_FTS3_PARENTHESIS=1 \
    -DSQLITE_ENABLE_FTS4=1 \
    -DSQLITE_ENABLE_FTS5=1 \
    -DSQLITE_ENABLE_JSON1=1 \
    -DSQLITE_ENABLE_LOAD_EXTENSION=1 \
    -DSQLITE_ENABLE_RTREE=1 \
    -DSQLITE_ENABLE_STAT4=1 \
    -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT=1 \
    -DSQLITE_MAX_VARIABLE_NUMBER=250000 \
    -DSQLITE_SOUNDEX=1 \
    -DSQLITE_TEMP_STORE=3 \
    -DSQLITE_USE_URI=1 \
    -O2 \
    -I. \
    -fPIC"
  export PREFIX="${PYTHON_PREFIX}"

  LIBS="-lm -ldl -lreadline -lncurses" ./configure \
    --disable-editline \
    --disable-tcl \
    --enable-readline \
    --enable-session \
    --enable-shared \
    --enable-tempstore=always \
    --prefix="${PREFIX}"
  make -j "${CMAKE_BUILD_PARALLEL_LEVEL}"
  make install

  test -x "${PYTHON_PREFIX}/bin/sqlite3" || { echo Error installing Python; exit 1; }

  tmp="$(mktemp)"
  cat > "${tmp}" <<EOS
  create table students (name text, age integer);
  insert into students (name, age) values ('Bob', 14);
  insert into students (name, age) values ('Sue', 12);
  insert into students (name, age) values ('Tim', 13);
  select name from students order by age asc;
EOS
  [ "$(sqlite3 < "${tmp}")" = "$(printf '%s\n' Sue Tim Bob)" ] || { echo "sqlite3 failed"; exit 1; }
}

#######################################
# description
# Globals:
#   MACOS
#   PATH
#   PYTHON_PREFIX
#   URL
# Arguments:
#  None
#######################################
main() {
  trap 'rm -rf ${src}' 1 2 3 6
  # shellcheck source=./dev-env.bash
  . "$(dirname "$0")/dev-env.bash"
  export PATH="${PYTHON_PREFIX}/bin:${PATH}"

  URL="https://www.python.org/ftp/python"
  MACOS=true; [ "$(uname -s)" = "Darwin" ] || MACOS=false

  case "${1-}" in
    jobs|latest|installed|tests) "$1"; exit;;
    prefix) echo "${PYTHON_PREFIX}"; exit ;;
    -f|--force) force; shift;;
    -h|--help) echo "Usage: ${0##*/} [jobs|latest|installed|prefix|tests] [-f|--force]"; exit;;
  esac

#  decimal
#  sqlite3
  py
}

main "$@"
